module java/classes/FieldDeclarations

imports

  signatures/java/classes/FieldDeclarations-sig

  java/arrays/ArrayInitializers
  java/classes/Main
  java/expressions/Main
  java/interfaces/Annotations
  java/names/TypeNames
  java/names/PackageOrTypeNames
  java/types/ParameterizedTypes
  java/types/PrimitiveTypes
  java/types/ReferenceTypes


rules // 8.3. Field Declarations

  fldDeclOk : scope * FieldDeclaration
  
  fldDeclOk(s, FieldDecl(fldModList, unannType, varDeclList)) :-
    fldModListOk(s, fldModList),
    unannTypeOk(s, unannType),
    varDeclListOk(s, varDeclList),
    true.


  varDeclIdOk : scope * VarDeclId

  varDeclIdOk(s, VariableDecl(id)) :-
    true.

  varDeclIdOk(s, VariableDeclArray(id, annDimList)) :-
    annDimListOk(s, annDimList),
    true.


  varDeclOk : scope * VarDecl
  varDeclListOk maps varDeclOk(*, list(*))
  
  varDeclOk(s, VariableDeclInit(varDeclId, varInit)) :-
    varDeclIdOk(s, varDeclId),
    varInitOk(s, varInit),
    true.

  varDeclOk(s, VarDeclId2VarDecl(varDeclId)) :-
    varDeclIdOk(s, varDeclId),
    true.


  varInitOk : scope * VariableInitializer
  varInitListOk maps varInitOk(*, list(*))
  
  varInitOk(s, Expression2VariableInitializer(expr)) :-
    _ == exprOk(s, expr),
    true.

  varInitOk(s, ArrayInitializer2VariableInitializer(arrayInit)) :-
    arrayInitOk(s, arrayInit),
    true.


  fldModOk : scope * FieldModifier
  fldModListOk maps fldModOk(*, list(*))
  
  fldModOk(s, Annotation2FieldModifier(anno)) :-
    annoOk(s, anno),
    true.
  fldModOk(s, Public2FieldModifier(_)) :- true.
  fldModOk(s, Protected2FieldModifier(_)) :- true.
  fldModOk(s, Private2FieldModifier(_)) :- true.
  fldModOk(s, Static2FieldModifier(_)) :- true.
  fldModOk(s, Final2FieldModifier(_)) :- true.
  fldModOk(s, Transient2FieldModifier(_)) :- true.
  fldModOk(s, Volatile2FieldModifier(_)) :- true.


  unannTypeOk : scope * UnannType
  
  unannTypeOk(s, UnannPrimitiveType2UnannType(unannPrimType)) :-
    unannPrimTypeOk(unannPrimType),
    true.

  unannTypeOk(s, UnannReferenceType2UnannType(unannRefType)) :-
    unannRefTypeOk(s, unannRefType),
    true.


  unannPrimTypeOk : UnannPrimitiveType
  
  unannPrimTypeOk(NumericType(numType)) :-
    numTypeOk(numType),
    true.

  unannPrimTypeOk(BooleanType()) :-
    true.


  unannRefTypeOk : scope * UnannReferenceType
  
  unannRefTypeOk(s, UnannClassType2UnannReferenceType(unannClsType)) :-
    unannClsTypeOk(s, unannClsType),
    true.

  unannRefTypeOk(s, UnannArrayType2UnannReferenceType(unannArrayType)) :-
    unannArrayTypeOk(s, unannArrayType),
    true.


  unannClsTypeOk : scope * UnannClassType
  
  unannClsTypeOk(s, ClassType(id, typeArgsOpt)) :-
  {typeDecl}
    typeDecl == singleTypeDecl(id, resolveLexicalTypeNames(s, id)),
    typeArgsOptOk(s, typeArgsOpt),
    true.

  unannClsTypeOk(s, UnannClassOrInterfaceTypeMember(unannClsType, annoList, id, typeArgsOpt)) :-
  {s_pkgOrCls typeDecl}
    s_pkgOrCls == unannPkgOrClsTypeOk(s, unannClsType),
    annoListOk(s, annoList),
    typeDecl == singleTypeDecl(id, resolveMemberTypeNames(s_pkgOrCls, id)),
    typeArgsOptOk(s, typeArgsOpt),
    true.


  unannPkgOrClsTypeOk : scope * UnannClassType -> scope

  unannPkgOrClsTypeOk(s, ClassType(id, typeArgsOpt)) = s_pkgOrCls :-
    s_pkgOrCls == pkgOrTypeDeclScope(resolveLexicalPkgOrTypeName(s, id)),
    typeArgsOptOk(s, typeArgsOpt),
    true.

  unannPkgOrClsTypeOk(s, UnannClassOrInterfaceTypeMember(unannClsType, annoList, id, typeArgsOpt)) = s_pkgOrCls :-
  {s_pkgOrCls'}
    s_pkgOrCls' == unannPkgOrClsTypeOk(s, unannClsType),
    annoListOk(s, annoList),
    s_pkgOrCls == pkgOrTypeDeclScope(resolveMemberPkgOrTypeName(s, id)),
    typeArgsOptOk(s, typeArgsOpt),
    true.


  unannArrayTypeOk : scope * UnannArrayType
  
  unannArrayTypeOk(s, UnannArrayTypePrimitive(unannPrimType, annDimList)) :-
    unannPrimTypeOk(unannPrimType),
    annDimListOk(s, annDimList),
    true.

  unannArrayTypeOk(s, UnannArrayTypeClassType(unannClsType, annDimList)) :-
    unannClsTypeOk(s, unannClsType),
    annDimListOk(s, annDimList),
    true.


