module java/statements/Statements

imports

  signatures/java/statements/Statements-sig

  java/classes/FieldDeclarations
  java/classes/MethodDeclarations
  java/expressions/Main
  java/names/Main
  java/statements/Blocks
  java/statements/Main
  java/types/ReferenceTypes


rules // 14.5. Statements

  stmtOk : scope * Statement


  stmtOk(s, Labeled(id, stmt)) :-
    stmtOk(s, stmt),
    true.


  stmtOk(s, If(expr_cond, stmt_then)) :-
  {s_then}
    _ == exprOk(s, expr_cond),
    new s_then, s_then -LEX-> s,
    stmtOk(s_then, stmt_then),
    true.

  stmtOk(s, IfElse(expr_cond, stmt_then, stmt_else)) :-
  {s_then s_else}
    _ == exprOk(s, expr_cond),
    new s_then, s_then -LEX-> s,
    stmtOk(s_then, stmt_then),
    new s_else, s_else -LEX-> s,
    stmtOk(s_else, stmt_else),
    true.
  

  stmtOk(s, While(expr_cond, stmt)) :-
  {s_while}
    _ == exprOk(s, expr_cond),
    new s_while, s_while -LEX-> s,
    stmtOk(s, stmt),
    true.
  

  stmtOk(s, For(forInit, exprOpt, forUpdate, stmt)) :-
  {s_for}
    new s_for, s_for -LEX-> s,
    forInitOk(s, forInit),
    _ == exprOptOk(s, exprOpt),
    forUpdateOk(s, forUpdate),
    stmtOk(s_for, stmt),
    true.

  stmtOk(s, ForEach(varModList, unannType, varDeclId, expr, stmt)) :-
  {s_foreach}
    new s_foreach, s_foreach -LEX-> s,
    varModListOk(s, varModList),
    unannTypeOk(s, unannType),
    varDeclIdOk(s, varDeclId),
    _ == exprOk(s, expr),
    stmtOk(s_foreach, stmt),
    true.

  forInitOk : scope * ForInit
  
  forInitOk(s, Exprs2ForInit(exprs)) :-
    exprsOk(s, exprs),
    true.

  forInitOk(s, VarDecls(varModList, unannType, varDeclList)) :-
    varModListOk(s, varModList),
    unannTypeOk(s, unannType),
    varDeclListOk(s, varDeclList),
    true.

  forUpdateOk : scope * ForUpdate
  
  forUpdateOk(s, Exprs2ForUpdate(exprs)) :-
    exprsOk(s, exprs),
    true.

  exprsOk : scope * Exprs
  
  exprsOk(s, ExprList(exprList)) :-
    _ == exprListOk(s, exprList),
    true.

    
  stmtOk(s, Block2Statement(blk)) :-
    blkOk(s, blk),
    true.
    
    
  stmtOk(s, ExpressionStatement(expr)) :-
    _ == exprOk(s, expr),
    true.
    
  
  stmtOk(s, Assert(expr)) :-
    _ == exprOk(s, expr),
    true.
    
  stmtOk(s, Assert(expr1, expr2)) :-
    _ == exprOk(s, expr1),
    _ == exprOk(s, expr2),
    true.
    
    
  stmtOk(s, Switch(expr, switchGroupList, switchLabelList)) :-
    _ == exprOk(s, expr),
    switchGroupListOk(s, switchGroupList),
    switchLabelListOk(s, switchLabelList),
    true.
    
  switchGroupOk : scope * SwitchGroup
  switchGroupListOk maps switchGroupOk(*, list(*))

  switchGroupOk(s, SwitchGroup(switchLabelList, blkStmtList)) :-
    switchLabelListOk(s, switchLabelList),
    blkStmtListOk(s, blkStmtList),
    true.

  switchLabelOk : scope * SwitchLabel
  switchLabelListOk maps switchLabelOk(*, list(*))

  switchLabelOk(s, CaseExpr(expr)) :-
    _ == exprOk(s, expr),
    true.
    
  switchLabelOk(s, DefaultCase()) :-
    true.
    
    
  stmtOk(s, DoWhile(stmt, expr)) :-
    stmtOk(s, stmt),
    _ == exprOk(s, expr),
    true. 
   

  stmtOk(s, Break()) :-
    true.
    
  stmtOk(s, Break(id)) :-
    true.
    
    
  stmtOk(s, Continue()) :-
    true.
    
  stmtOk(s, Continue(id)) :-
    true. 
    
    
  stmtOk(s, Return()) :-
    true.
    
  stmtOk(s, Return(expr)) :-
    _ == exprOk(s, expr),
    true.
    
    
  stmtOk(s, Synchronized(expr, blk)) :-
    _ == exprOk(s, expr),
    blkOk(s, blk),
    true.
    
    
  stmtOk(s, Throw(expr)) :-
    _ == exprOk(s, expr),
    true.
    
    
  stmtOk(s, Try(blk, catchClauseList)) :-
    blkOk(s, blk),
    catchClauseListOk(s, catchClauseList),
    true.
    
  catchClauseOk : scope * CatchClause
  catchClauseListOk maps catchClauseOk(*, list(*))
  
  catchClauseOk(s, Catch(catchFormalParam, blk)) :-
  {s_catch}
    new s_catch, s_catch -LEX-> s,
    catchFormalParamOk(s_catch, catchFormalParam),
    blkOk(s_catch, blk),
    true.
    
  catchFormalParamOk : scope * CatchFormalParameter
  
  catchFormalParamOk(s, CatchParam(varModList, catchType, varDeclId)) :-
    varModListOk(s, varModList),
    catchTypeOk(s, catchType),
    varDeclIdOk(s, varDeclId),
    true.
    
  catchTypeOk : scope * CatchType
  
  catchTypeOk(s, CatchType(unannClsType, catchTypeRestList)) :-
    unannClsTypeOk(s, unannClsType),
    catchTypeRestListOk(s, catchTypeRestList),
    true.
    
  catchTypeRestOk : scope * CatchTypeRest
  catchTypeRestListOk maps catchTypeRestOk(*, list(*))
  
  catchTypeRestOk(s, CatchTypeElem(clsType)) :-
    clsTypeOk(s, clsType),
    true.
    
    
  stmtOk(s, TryWithResources(resourceList, blk_catch, catchClauseList)) :-
  {s_try}
    new s_try, s_try -LEX-> s,
    resourceListOk(s_try, resourceList),
    blkOk(s_try, blk_catch),
    catchClauseListOk(s_try, catchClauseList),
    true.
    
  stmtOk(s, TryWithResourcesSemiColon(resourceList, blk_catch, catchClauseList)) :-
  {s_try}
    new s_try, s_try -LEX-> s,
    resourceListOk(s_try, resourceList),
    blkOk(s_try, blk_catch),
    catchClauseListOk(s_try, catchClauseList),
    true.
  
  stmtOk(s, TryWithResources(resourceList, blk_catch, catchClauseList, blk_finally)) :-
  {s_try}
    new s_try, s_try -LEX-> s,
    resourceListOk(s_try, resourceList),
    blkOk(s_try, blk_catch),
    catchClauseListOk(s_try, catchClauseList),
    blkOk(s_try, blk_finally),
    true.
    
  stmtOk(s, TryWithResourcesSemiColon(resourceList, blk_catch, catchClauseList, blk_finally)) :-
  {s_try}
    new s_try, s_try -LEX-> s,
    resourceListOk(s_try, resourceList),
    blkOk(s_try, blk_catch),
    catchClauseListOk(s_try, catchClauseList),
    blkOk(s_try, blk_finally),
    true.
  
  resourceOk : scope * Resource
  resourceListOk maps resourceOk(*, list(*))
  
  resourceOk(s, Resource(varModList, unannType, varDeclId, expr)) :-
    varModListOk(s, varModList),
    unannTypeOk(s, unannType),
    varDeclIdOk(s, varDeclId),
    _ == exprOk(s, expr),
    true.
