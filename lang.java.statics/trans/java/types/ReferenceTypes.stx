module java/types/ReferenceTypes

imports

  signatures/java/types/ReferenceTypes-sig

  java/interfaces/Annotations
  java/names/TypeNames
  java/names/PackageOrTypeNames
  java/types/Main
  java/types/ParameterizedTypes
  java/types/PrimitiveTypes


// 4.3. Reference Types and Values

signature

  constructors
    ARRAY     : TYPE -> TYPE
    CLASS     : scope -> TYPE
    INTF      : scope -> TYPE
  
rules 

  refTypeOk : ReferenceType
  
  refTypeOk(ClassType2ReferenceType(clsType)) :-
    clsTypeOk(_, clsType),
    true.
    
  refTypeOk(ArrayType2ReferenceType(arrayType)) :-
    arrayTypeOk(arrayType),
    true.


  clsTypeOk : scope * ClassType
  clsTypeListOk maps clsTypeOk(*, list(*))
  
  clsTypeOk(s, ClassType(annoList, id, typeArgsOpt)) :-
  {typeDecl}
    annoListOk(annoList),
    typeDecl == singleTypeDecl(id, resolveLexicalTypeNames(s, id)),
    typeArgsOptOk(typeArgsOpt),
    true.

  clsTypeOk(s, ClassOrInterfaceTypeMember(clsType, annoList, id, typeArgsOpt)) :-
  {s_pkgOrCls typeDecl}
    s_pkgOrCls == pkgOrClsTypeOk(s, clsType),
    annoListOk(annoList),
    typeDecl == singleTypeDecl(id, resolveMemberTypeNames(s_pkgOrCls, id)),
    typeArgsOptOk(typeArgsOpt),
    true.


  pkgOrClsTypeOk : scope * ClassType -> scope
  pkgOrClsTypeOk1 : scope * Id * list(TYPE_PATH) -> scope
  pkgOrClsTypeOk2 : scope * Id * list(PKG_PATH) -> scope

  pkgOrClsTypeOk(s, ClassType(annoList, id, typeArgsOpt)) = s_pkgOrCls :-
    annoListOk(annoList),
    s_pkgOrCls == pkgOrTypeDeclScope(resolveLexicalPkgOrTypeName(s, id)),
    typeArgsOptOk(typeArgsOpt),
    true.

  pkgOrClsTypeOk(s, ClassOrInterfaceTypeMember(clsType, annoList, id, typeArgsOpt)) = s_pkgOrCls :-
  {s_pkgOrCls'}
    s_pkgOrCls' == pkgOrClsTypeOk(s, clsType),
    annoListOk(annoList),
    s_pkgOrCls == pkgOrTypeDeclScope(resolveMemberPkgOrTypeName(s, id)),
    typeArgsOptOk(typeArgsOpt),
    true.







  typeVarOk : TypeVariable
  
  typeVarOk(TypeVar(annoList, id)) :-
    annoListOk(annoList),
    true.


  arrayTypeOk : ArrayType
  
  arrayTypeOk(ArrayTypePrimitive(primType, annDims)) :-
    primTypeOk(primType),
    annDimsOk(annDims),
    true.

  arrayTypeOk(ArrayTypeClassType(clsType, annDims)) :-
    clsTypeOk(_, clsType),
    annDimsOk(annDims),
    true.


  annDimsOk : AnnotatedDims
  
  annDimsOk(AnnotatedDims2AnnotatedDims(annDimList)) :-
    annDimListOk(annDimList),
    true.


  annDimsEmptyOk : AnnotatedDimsEmpty
  
  annDimsEmptyOk(AnnotatedDims2AnnotatedDimsEmpty(annDimList)) :-
    annDimListOk(annDimList),
    true.


  annDimOk : AnnotatedDim
  annDimListOk maps annDimOk(list(*))

  annDimOk(AnnotateDim(annoList)) :-
    annoListOk(annoList),
    true.


rules

  typeScope : TYPE -> scope
  
  typeScope(CLASS(s_cls)) = s_cls.

  typeScope(INTF(s_intf)) = s_intf.
  