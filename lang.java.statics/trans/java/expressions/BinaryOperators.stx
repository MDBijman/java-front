module java/expressions/BinaryOperators

imports

  signatures/java/expressions/BinaryOperators-sig

  java/expressions/Main
  java/types/ReferenceTypes


rules // 15.17. Multiplicative Operators
      // 15.18. Additive Operators
      // 15.19. Shift Operators
      // 15.20. Relational Operators
      // 15.21. Equality Operators
      // 15.22. Bitwise and Logical Operators
      // 15.23. Conditional-And Operator &&
      // 15.24. Conditional-Or Operator ||
      
  exprOk(Mul(expr1, expr2)) :-
    exprOk(expr1),
    exprOk(expr2),
    true. 
      
  exprOk(Div(expr1, expr2)) :-
    exprOk(expr1),
    exprOk(expr2),
    true. 
      
  exprOk(Mod(expr1, expr2)) :-
    exprOk(expr1),
    exprOk(expr2),
    true. 
      
  exprOk(Add(expr1, expr2)) :-
    exprOk(expr1),
    exprOk(expr2),
    true. 
      
  exprOk(Sub(expr1, expr2)) :-
    exprOk(expr1),
    exprOk(expr2),
    true. 
      
  exprOk(LeftShift(expr1, expr2)) :-
    exprOk(expr1),
    exprOk(expr2),
    true. 
      
  exprOk(RightShift(expr1, expr2)) :-
    exprOk(expr1),
    exprOk(expr2),
    true. 
      
  exprOk(URightShift(expr1, expr2)) :-
    exprOk(expr1),
    exprOk(expr2),
    true. 
      
  exprOk(Lt(expr1, expr2)) :-
    exprOk(expr1),
    exprOk(expr2),
    true. 
      
  exprOk(Gt(expr1, expr2)) :-
    exprOk(expr1),
    exprOk(expr2),
    true. 
      
  exprOk(LtEq(expr1, expr2)) :-
    exprOk(expr1),
    exprOk(expr2),
    true. 
      
  exprOk(GtEq(expr1, expr2)) :-
    exprOk(expr1),
    exprOk(expr2),
    true. 
      
  exprOk(InstanceOf(expr, refType)) :-
    exprOk(expr),
    refTypeOk(refType),
    true. 
      
  exprOk(Eq(expr1, expr2)) :-
    exprOk(expr1),
    exprOk(expr2),
    true. 
      
  exprOk(NotEq(expr1, expr2)) :-
    exprOk(expr1),
    exprOk(expr2),
    true. 
      
  exprOk(And(expr1, expr2)) :-
    exprOk(expr1),
    exprOk(expr2),
    true. 
      
  exprOk(Xor(expr1, expr2)) :-
    exprOk(expr1),
    exprOk(expr2),
    true. 
      
  exprOk(Or(expr1, expr2)) :-
    exprOk(expr1),
    exprOk(expr2),
    true. 
      
  exprOk(LazyAnd(expr1, expr2)) :-
    exprOk(expr1),
    exprOk(expr2),
    true. 
      
  exprOk(LazyOr(expr1, expr2)) :-
    exprOk(expr1),
    exprOk(expr2),
    true. 
      
  exprOk(Cond(expr_cond, expr_then, expr_else)) :-
    exprOk(expr_cond),
    exprOk(expr_then),
    exprOk(expr_else),
    true. 


