module java/expressions/ClassInstanceCreation

imports

  signatures/java/expressions/ClassInstanceCreation-sig

  java/classes/ClassDeclarations
  java/expressions/Main
  java/interfaces/Annotations
  java/names/Main
  java/names/TypeNames
  java/names/PackageOrTypeNames
  java/types/ParameterizedTypes
  java/types/ReferenceTypes


rules // 15.9. Class Instance Creation Expressions

  exprOk(s, UnqualifiedInstance2Expression(unqualInst)) = T :-
    T == unqualInstOk(s, unqualInst).

  exprOk(s, QualifiedInstance(expr, unqualInst)) = T' :-
  {T}
    T == exprOk(s, expr),
    T' == qualInstOk(s, T, unqualInst),
    true.


  unqualInstOk : scope * UnqualifiedInstance -> TYPE
  
  unqualInstOk(s, NewInstance(typeArgsOpt, annoList, id, qualIdList, typeArgsOrDiamondOpt, exprList)) = typeDeclType(typeDecl) :-
  {qid}
    _ == typeArgsOptOk(s, typeArgsOpt),
    annoListOk(s, annoList),
    qid == qualIdListOk(s, id, qualIdList),
    typeDecl == resolveTypeName(s, qid),
    typeArgsOrDiamondOptOk(s, typeArgsOrDiamondOpt),
    _ == exprListOk(s, exprList),
    true.

  unqualInstOk(s, NewInstance(typeArgsOpt, annoList, id, qualIdList, typeArgsOrDiamondOpt, exprList, clsBodyDeclList)) = REF(s_cls) :-
  {qid typeDecl}
    _ == typeArgsOptOk(s, typeArgsOpt),
    annoListOk(s, annoList),
    qid == qualIdListOk(s, id, qualIdList),
    typeDecl == resolveTypeName(s, qid),
    typeArgsOrDiamondOptOk(s, typeArgsOrDiamondOpt),
    _ == exprListOk(s, exprList),

    new s_cls, s_cls -LEX-> s,
    // FIXME make s_cls a subtype of typeDecl

    clsBodyDeclListOk(s_cls, clsBodyDeclList).


  qualInstOk : scope * TYPE * UnqualifiedInstance -> TYPE

  qualInstOk(s, T, NewInstance(typeArgsOpt, annoList, id, [], typeArgsOrDiamondOpt, exprList)) = typeDeclType(typeDecl) :-
  {s_ty}
    _ == typeArgsOptOk(s, typeArgsOpt),
    annoListOk(s, annoList),
    s_ty == typeScope(T),
    typeDecl == singleTypeDecl(id, resolveMemberTypeNames(s_ty, id)),
    typeArgsOrDiamondOptOk(s, typeArgsOrDiamondOpt),
    _ == exprListOk(s, exprList).

  qualInstOk(s, T, NewInstance(typeArgsOpt, annoList, id, [], typeArgsOrDiamondOpt, exprList, clsBodyDeclList)) = REF(s_cls) :-
  {s_ty typeDecl}
    _ == typeArgsOptOk(s, typeArgsOpt),
    annoListOk(s, annoList),
    s_ty == typeScope(T),
    typeDecl == singleTypeDecl(id, resolveMemberTypeNames(s_ty, id)),
    typeArgsOrDiamondOptOk(s, typeArgsOrDiamondOpt),
    _ == exprListOk(s, exprList),
    
    new s_cls, s_cls -LEX-> s,
    // FIXME make s_cls a subtype of typeDecl
    
    clsBodyDeclListOk(s_cls, clsBodyDeclList).


  qualIdListOk : scope * Id * list(QualifiedId) -> QID
  qualIdListOk1 : scope * Id * list(QualifiedId) * list(Id) -> QID
  qualIdListOk2 : QID * list(Id) -> QID

  qualIdListOk(s, id, qualIdList) = qualIdListOk1(s, id, qualIdList, []).

  qualIdListOk1(s, id, [], ids) = qualIdListOk2(ID(id), ids).

  qualIdListOk1(s, id, [QualifiedId(annoList, id')|qids], ids) = qualIdListOk1(s, id, qids, [id'|ids]) :-
    annoListOk(s, annoList).

  qualIdListOk2(qid, []) = qid.

  qualIdListOk2(qid, [id|ids]) = qualIdListOk2(QID(qid, id), ids).


  typeArgsOrDiamondOk : scope * TypeArgumentsOrDiamond
  typeArgsOrDiamondOptOk maps typeArgsOrDiamondOk(*, list(*))
  
  typeArgsOrDiamondOk(s, TypeArguments2TypeArgumentsOrDiamond(typeArgs)) :-
    _ == typeArgsOk(s, typeArgs).

  typeArgsOrDiamondOk(s, Diamond()) :-
    true.


