module java/Object

imports

  java/names/Main
  java/names/PackageNames
  java/names/TypeNames
  java/packages/PackageDeclarations
  java/types/Main
  java/types/ReferenceTypes

signature

  relations
    javaLangObject : -> TYPE_DECL

rules

  declareObject : scope
    declareObject1 : list(PKG_DECL) * scope
    declareObject2 : list(TYPE_PATH) * scope
    declareObject3 : scope

  declareObject(s) :-
    declareObject1(resolveJavaLang(s), s).

      declareObject1([lang], s) :-
        declareObject2(resolveMemberTypeNames(pkgDeclScope(lang), Id("Object")), s).

      declareObject1(_, s) :-
        declareObject3(s).

      declareObject2([(_, Object)], s) :-
        !javaLangObject[Object] in s.

      declareObject2(_, s) :-
        declareObject3(s).

      declareObject3(s) :-
      {id s_obj Object}
        id == Id("Object"),
        new s_obj,
        declareType(new, id, s_obj, CLASS()),
        !javaLangObject[(id, s_obj)] in s.


  objectOk : scope -> TYPE

  objectOk(s) = typeDeclType(resolveObject(s)).


  resolveObject : scope -> TYPE_DECL

  resolveObject(s) = Object :-
    query javaLangObject filter LEX* and true in s |-> [(_, Object)].


rules

  resolveJavaLang : scope -> list(PKG_DECL)
  resolveJavaLang1 : list(PKG_PATH) -> list(PKG_DECL)
  resolveJavaLang2 : list(PKG_PATH) -> list(PKG_DECL)
  
  resolveJavaLang(s) = resolveJavaLang1(resolveLexicalPkgNames(s, Id("java"))).

      resolveJavaLang1([(_, java)]) = resolveJavaLang2(resolveMemberPkgNames(pkgDeclScope(java), Id("lang"))).

      resolveJavaLang1(_) = [].

      resolveJavaLang2([(_, lang)]) = [lang].

      resolveJavaLang2(_) = [].


  importJavaLang : scope * scope

    importJavaLang1 : list(PKG_DECL) * scope

  importJavaLang(s, s_pkg) :-
    importJavaLang1(resolveJavaLang(s), s_pkg).

      importJavaLang1([lang], s_pkg) :-
      {s_lang}
        s_lang == pkgDeclScope(lang),
        s_pkg -IMP_OD-> s_lang,
        true.

      importJavaLang1(_, s_pkg) :-
        try { false } | warning "Could not import java.lang.".

