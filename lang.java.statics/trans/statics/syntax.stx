module statics/syntax

signature

  ////////////////////////////////////////////////////////
  // 3.8. Identifiers
  ////////////////////////////////////////////////////////

  sorts Id constructors
    Id : string -> Id

  ////////////////////////////////////////////////////////
  // 4.3. Reference Types and Values
  ////////////////////////////////////////////////////////
  
  sorts Type constructors
    PT2T : PrimitiveType -> Type
    RT2T : ReferenceType -> Type
    Void : Type
    ArrayType : Type * list(Annotation) -> Type
  
  sorts PrimitiveType constructors
    NumericType : string -> PrimitiveType
    BooleanType : PrimitiveType

  sorts ReferenceType constructors
    CT2RT : ClassType -> ReferenceType
    AT2RT : ArrayType -> ReferenceType
  
  sorts ArrayType constructors
    ArrayTypePrimitive : PrimitiveType * list(Annotation) -> ArrayType
    ArrayTypeClassType : ClassType * list(Annotation) -> ArrayType
    
//    UCT2URT : ClassType -> ReferenceType

  sorts ClassType constructors
    ClassType : list(Annotation) * Id * MaybeTypeArguments -> ClassType
    ClassOrInterfaceTypeMember : ClassType * list(Annotation) * Id * MaybeTypeArguments -> ClassType

  ////////////////////////////////////////////////////////
  // 4.5. Parameterized Types
  ////////////////////////////////////////////////////////

  sorts MaybeTypeArguments = list(TypeArguments)
  sorts TypeArguments constructors
    TypeArguments : list(TypeArgument) -> TypeArguments

  sorts TypeArgument = ReferenceType
                  // = Wildcard

  ////////////////////////////////////////////////////////
  // 6.5. Determining the Meaning of a Name
  ////////////////////////////////////////////////////////

  sorts PackageName constructors
    PackageName : Id -> PackageName
    PackageName : PackageName * Id -> PackageName

  sorts TypeName constructors
    TypeName : Id -> TypeName
    TypeName : PackageOrTypeName * Id -> TypeName

  sorts PackageOrTypeName constructors
    PackageOrTypeName : Id -> PackageOrTypeName
    PackageOrTypeName : PackageOrTypeName * Id -> PackageOrTypeName
  
  sorts ExpressionName constructors
    ExpressionName : Id -> ExpressionName
    ExpressionName : AmbiguousName * Id -> ExpressionName

  sorts MethodName constructors
    MethodName : Id -> MethodName
    
  sorts AmbiguousName constructors
    AmbiguousName : Id -> AmbiguousName
    AmbiguousName : AmbiguousName * Id -> AmbiguousName

  ////////////////////////////////////////////////////////
  // 7.3. Compilation Units
  ////////////////////////////////////////////////////////

  sorts CompilationUnit constructors
    CompilationUnit : MaybePackageDeclaration * list(ImportDeclaration) * list(TypeDeclaration) -> CompilationUnit

  sorts TypeDeclaration constructors
    CD2TD : ClassDeclaration  -> TypeDeclaration
    ID2TD : InterfaceDeclaration  -> TypeDeclaration

  ////////////////////////////////////////////////////////
  // 7.4. Package Declarations
  ////////////////////////////////////////////////////////

  sorts MaybePackageDeclaration = list(PackageDeclaration)
  sorts PackageDeclaration constructors
    PackageDeclaration : list(Annotation) * list(Id) -> PackageDeclaration

  ////////////////////////////////////////////////////////
  // 7.5. Import Declarations
  ////////////////////////////////////////////////////////

  sorts ImportDeclaration constructors
    SingleTypeImport   : TypeName -> ImportDeclaration
    TypeImportOnDemand : PackageOrTypeName -> ImportDeclaration

  ////////////////////////////////////////////////////////
  // 8.1. Class Declarations
  ////////////////////////////////////////////////////////

  sorts ClassDeclaration constructors
    NCD2CD : NormalClassDeclaration -> ClassDeclaration
    ED2CD  : EnumDeclaration -> ClassDeclaration

  sorts NormalClassDeclaration constructors
    ClassDeclaration : list(ClassModifier) * Id * MaybeTypeParameters * MaybeSuperClass * MaybeSuperInterfaces * MaybeClassBodyDeclaration -> NormalClassDeclaration

  sorts ClassModifier

  sorts MaybeTypeParameters = list(TypeParameters)
  sorts TypeParameters

  sorts MaybeSuperClass = list(SuperClass)
  sorts SuperClass constructors
    SuperClass : ClassType -> SuperClass

  sorts MaybeSuperInterfaces = list(SuperInterfaces)
  sorts SuperInterfaces constructors
    SuperInterface : list(ClassType) -> SuperInterfaces

  sorts MaybeClassBodyDeclaration = list(ClassBodyDeclaration)
  sorts ClassBodyDeclaration constructors
    CMD2CBD : ClassMemberDeclaration -> ClassBodyDeclaration
    
  sorts ClassMemberDeclaration constructors
    FD2CMD : list(FieldDeclaration) -> ClassMemberDeclaration
    MD2CMD : MethodDeclaration -> ClassMemberDeclaration
    CD2CMD : ClassDeclaration -> ClassMemberDeclaration
    ID2CMD : InterfaceDeclaration -> ClassMemberDeclaration
    //Semicolon : ClassMemberDeclaration
    
  sorts FieldDeclaration constructors
    TFieldDecl : list(FieldModifier) * Type * Id -> FieldDeclaration
    TFieldDeclArray : list(FieldModifier) * Type * Id * int -> FieldDeclaration
  
  sorts MethodDeclaration constructors
    MethodDecl : list(MethodModifier) * string * MethodHeader * Statement -> MethodDeclaration
  
  //Fields
  sorts FieldModifier
  sorts VarDecl
  
  //Methods
  sorts MethodModifier
  sorts MethodHeader constructors
    MethodHeader : Type * Id * MethodParams * AnnotatedDimsEmpty * MaybeThrows -> MethodHeader
    MethodHeaderTypeParameters : TypeParameters * list(Annotation) * Type * Id * MethodParams * MaybeThrows -> MethodHeader
  
  sorts MethodParams = list(FormalParam)
  sorts FormalParam constructors
    FormalParam : list(VariableModifier) * Type * VarDeclId -> FormalParam
    ReceiverParamQual : list(Annotation) * Type * Id -> FormalParam
    ReceiverParam : list(Annotation) * Type -> FormalParam
    
  sorts VariableModifier
  
  sorts VarDeclId constructors
    VariableDecl : Id -> VarDeclId
    VariableDeclArray : Id * AnnotatedDims -> VarDeclId
    
  
  sorts AnnotatedDimsEmpty
  sorts AnnotatedDims = list(AnnotatedDim)
  sorts AnnotatedDim
  sorts MaybeThrows

  ////////////////////////////////////////////////////////
  // 8.9. Enum Types
  ////////////////////////////////////////////////////////

  sorts EnumDeclaration constructors
    EnumDeclComma : list(ClassModifier) * Id * MaybeSuperInterfaces * list(EnumConstant) * MaybeEnumBodyDeclarations -> EnumDeclaration
    EnumDecl : list(ClassModifier) * Id * MaybeSuperInterfaces * list(EnumConstant) * MaybeEnumBodyDeclarations -> EnumDeclaration

  sorts EnumConstant

  sorts MaybeEnumBodyDeclarations = list(EnumBodyDeclarations)
  sorts EnumBodyDeclarations

  ////////////////////////////////////////////////////////
  // 9.1. Interface Declarations
  ////////////////////////////////////////////////////////

  sorts InterfaceDeclaration constructors
    NormalInterface : list(InterfaceModifier) * Id * MaybeTypeParameters * MaybeExtendsInterfaces * list(InterfaceMemberDeclaration) -> InterfaceDeclaration
    ATD2ID : AnnotationTypeDeclaration -> InterfaceDeclaration

  sorts InterfaceModifier
  
  sorts MaybeExtendsInterfaces = list(ExtendsInterfaces)
  sorts ExtendsInterfaces constructors
    ExtendsInterfaces : list(ClassType) -> ExtendsInterfaces
  
  sorts InterfaceMemberDeclaration constructors
    CD2IMD : ClassDeclaration -> InterfaceMemberDeclaration
    ConstD2IMD : list(FieldDeclaration) -> InterfaceMemberDeclaration
    IMD2IMD : InterfaceMethodDeclaration -> InterfaceMemberDeclaration
    ID2IMD : InterfaceDeclaration -> InterfaceMemberDeclaration
    //Semicolon : InterfaceMemberDeclaration
  
  sorts InterfaceMethodDeclaration constructors
    AbstractMethodDec : list(InterfaceMethodModifier) * string * MethodHeader * Statement -> InterfaceMethodDeclaration

  sorts InterfaceMethodModifier
  
  ////////////////////////////////////////////////////////
  // 9.6. Annotation Types
  ////////////////////////////////////////////////////////

  sorts AnnotationTypeDeclaration constructors
    AnnoDec : list(InterfaceModifier) * Id * list(AnnotationTypeMemberDeclaration) -> AnnotationTypeDeclaration

  sorts AnnotationTypeMemberDeclaration

  ////////////////////////////////////////////////////////
  // 9.7. Annotations
  ////////////////////////////////////////////////////////

  sorts Annotation

  ////////////////////////////////////////////////////////
  // 14 Statements
  ////////////////////////////////////////////////////////
  sorts Statement constructors
    Block : list(Statement) -> Statement
    ExpressionStatement : Expression -> Statement
    ExpressionsStatement : list(Expression) -> Statement
    VarDeclStatement : Type * Id -> Statement
    ArrayVarDeclStatement : Type * Id * int -> Statement
  
  ////////////////////////////////////////////////////////
  // Expressions
  ////////////////////////////////////////////////////////
  
  sorts Expression constructors
    //References to names
    EN2E : ExpressionName -> Expression
    
    //Primary
    L2E : Literal -> Expression
    CL2E : ClassLiteral -> Expression
    This : Expression
    QThis : TypeName -> Expression
    
    //Fields
    FA2E : FieldAccess -> Expression
    
    //Methods
    Invoke       : MethodName * list(Expression) -> Expression
    InvokeQExp   : Expression * MaybeTypeArguments * Id * list(Expression) -> Expression
    InvokeSuper  : MaybeTypeArguments * Id * list(Expression) -> Expression
    InvokeQSuper : TypeName * MaybeTypeArguments * Id * list(Expression) -> Expression
    
    //ArrayAccess + Array creation
    AA2E : ArrayAccess -> Expression
    ACE2E : ArrayCreationExpression -> Expression
    
    //Assignments
    Assign : Expression * Expression -> Expression
    
    //Eq and Add are flattened to primitives
    InstanceOf : Expression * Type -> Expression
    Cond : Expression * Expression * Expression -> Expression
    
    //Creating new instances
    UI2E : UnqualifiedInstance -> Expression
    QualifiedInstance : Expression * UnqualifiedInstance -> Expression
    
    //Casts
    CastPrimitive : Type * Expression -> Expression
    CastReference : Type * Other * Expression -> Expression
  
  sorts ArrayAccess constructors
    ArrayAccess : Expression * Expression -> ArrayAccess
  
  sorts ArrayCreationExpression constructors
    NewArray : Type * Other * Other -> ArrayCreationExpression
    NewArrayInit : Type * Other * Other -> ArrayCreationExpression
  
  sorts Other
  
  //Second is actually type arguments or diamond
  sorts UnqualifiedInstance constructors
    NewInstance : MaybeTypeArguments * list(Annotation) * Id * list(QualifiedId) * MaybeTypeArguments * list(Expression) -> UnqualifiedInstance
    NewInstance : MaybeTypeArguments * list(Annotation) * Id * list(QualifiedId) * MaybeTypeArguments * list(Expression) * list(ClassBodyDeclaration) -> UnqualifiedInstance
  
  sorts QualifiedId constructors
    QualifiedId : list(Annotation) * Id -> QualifiedId
  
  sorts FieldAccess constructors
    Field : Expression * Id -> FieldAccess
    SuperField : Id -> FieldAccess
    QSuperField : TypeName * Id -> FieldAccess
  
  sorts Literal constructors
    Literal : Type -> Literal
    Null : Literal
    
  sorts ClassLiteral constructors
    TypeNameClassLiteral    : TypeName * int -> ClassLiteral
    NumericTypeClassLiteral : PrimitiveType * int -> ClassLiteral
    BooleanClassLiteral     : int -> ClassLiteral
    VoidClassLiteral        : ClassLiteral
