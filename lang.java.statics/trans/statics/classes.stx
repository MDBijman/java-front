module statics/classes

imports

  signatures/java/classes/Main-sig

rules // Chapter 8. Classes


rules // 8.1. Class Declarations

  clsDeclOk : ClassDeclaration
  
  clsDeclOk(NormalClassDeclaration2ClassDeclaration(normalClsDecl)) :-
    try { false } | note "unimplemented" @normalClsDecl
  , true.

  clsDeclOk(EnumDeclaration2ClassDeclaration(enumDecl)) :-
    try { false } | note "unimplemented" @enumDecl
  , true.


  normalClsDeclOk : NormalClassDeclaration
  
  normalClsDeclOk(ClassDeclaration(clsMods, id, typeParams', superCls', superIntfs', clsBodyDecls)) :-
    try { false } | note "unimplemented" @clsMods
  , try { false } | note "unimplemented" @id
  , try { false } | note "unimplemented" @typeParams'
  , try { false } | note "unimplemented" @superCls'
  , try { false } | note "unimplemented" @superIntfs'
  , try { false } | note "unimplemented" @clsBodyDecls
  , true.


  clsModOk : ClassModifier
  
  clsModOk(Annotation2ClassModifier(anno)) :-
    try { false } | note "unimplemented" @anno
  , true.
  clsModOk(Public2ClassModifier(_)) :- false.
  clsModOk(Protected2ClassModifier(_)) :- false.
  clsModOk(Private2ClassModifier(_)) :- false.
  clsModOk(Abstract2ClassModifier(_)) :- false.
  clsModOk(Static2ClassModifier(_)) :- false.
  clsModOk(Final2ClassModifier(_)) :- false.
  clsModOk(Strictfp2ClassModifier(_)) :- false.


  typeParamsOk : TypeParameters
  
  typeParamsOk(TypeParameters(typeParams)) :-
    try { false } | note "unimplemented" @typeParams
  , true.


  superClsOk : SuperClass
  
  superClsOk(SuperClass(clsTypes)) :-
    try { false } | note "unimplemented" @clsTypes
  , true.


  superIntfsOk : SuperInterfaces
  
  superIntfsOk(SuperInterface(clsTypes)) :-
    try { false } | note "unimplemented" @clsTypes
  , true.


  clsBodyDeclOk : ClassBodyDeclaration
  
  clsBodyDeclOk(ClassMemberDeclaration2ClassBodyDeclaration(clsMemDecl)) :-
    try { false } | note "unimplemented" @clsMemDecl
  , true.

  clsBodyDeclOk(InstanceInitializer2ClassBodyDeclaration(instInit)) :-
    try { false } | note "unimplemented" @instInit
  , true.

  clsBodyDeclOk(StaticInitializer2ClassBodyDeclaration(staticInit)) :-
    try { false } | note "unimplemented" @staticInit
  , true.

  clsBodyDeclOk(ConstructorDeclaration2ClassBodyDeclaration(ctorDecl)) :-
    try { false } | note "unimplemented" @ctorDecl
  , true.


  clsMemDeclOk : ClassMemberDeclaration
  
  clsMemDeclOk(FieldDeclaration2ClassMemberDeclaration(fldDecl)) :-
    try { false } | note "unimplemented" @fldDecl
  , true.
  
  clsMemDeclOk(MethodDeclaration2ClassMemberDeclaration(mthdDecl)) :-
    try { false } | note "unimplemented" @mthdDecl
  , true.
  
  clsMemDeclOk(ClassDeclaration2ClassMemberDeclaration(clsDecl)) :-
    try { false } | note "unimplemented" @clsDecl
  , true.

  clsMemDeclOk(InterfaceDeclaration2ClassMemberDeclaration(intfDecl)) :-
    try { false } | note "unimplemented" @intfDecl
  , true.

  clsMemDeclOk(SemiColon2ClassMemberDeclaration(semiColon)) :-
    true.


rules // 8.3. Field Declarations

  fldDeclOk : FieldDeclaration
  
  fldDeclOk(FieldDecl(fldMods, unannType, varDecls)) :-
    try { false } | note "unimplemented" @fldMods
  , try { false } | note "unimplemented" @unannType
  , try { false } | note "unimplemented" @varDecls
  , true.


  varDeclIdOk : VarDeclId
  
  varDeclIdOk(VariableDecl(id)) :-
    try { false } | note "unimplemented" @id
  , true.

  varDeclIdOk(VariableDeclArray(id, annDims)) :-
    try { false } | note "unimplemented" @id
  , try { false } | note "unimplemented" @annDims
  , true.


  varDeclOk : VarDecl
  
  varDeclOk(VariableDeclInit(varDeclId, varInit)) :-
    try { false } | note "unimplemented" @varDeclId
  , try { false } | note "unimplemented" @varInit
  , true.

  varDeclOk(VarDeclId2VarDecl(varDeclId)) :-
    try { false } | note "unimplemented" @varDeclId
  , true.


  varInitOk : VariableInitializer
  
  varInitOk(Expression2VariableInitializer(expr)) :-
    try { false } | note "unimplemented" @expr
  , true.

  varInitOk(ArrayInitializer2VariableInitializer(arrayInit)) :-
    try { false } | note "unimplemented" @arrayInit
  , true.


  fldModOk : FieldModifier
  
  fldModOk(Annotation2FieldModifier(anno)) :-
    try { false } | note "unimplemented" @anno
  , true.
  fldModOk(Public2FieldModifier(_)) :- false.
  fldModOk(Protected2FieldModifier(_)) :- false.
  fldModOk(Private2FieldModifier(_)) :- false.
  fldModOk(Static2FieldModifier(_)) :- false.
  fldModOk(Final2FieldModifier(_)) :- false.
  fldModOk(Transient2FieldModifier(_)) :- false.
  fldModOk(Volatile2FieldModifier(_)) :- false.


  unannTypeOk : UnannType
  
  unannTypeOk(UnannPrimitiveType2UnannType(unannPrimType)) :-
    try { false } | note "unimplemented" @unannPrimType
  , true.

  unannTypeOk(UnannReferenceType2UnannType(unannRefType)) :-
    try { false } | note "unimplemented" @unannRefType
  , true.


  unannPrimTypeOk : UnannPrimitiveType
  
  unannPrimTypeOk(NumericType(numType)) :-
    try { false } | note "unimplemented" @numType
  , true.

  unannPrimTypeOk(BooleanType()) :-
    false.


  unannRefTypeOk : UnannReferenceType
  
  unannRefTypeOk(UnannClassType2UnannReferenceType(unannClsType)) :-
    try { false } | note "unimplemented" @unannClsType
  , true.

  unannRefTypeOk(UnannArrayType2UnannReferenceType(unannArrayType)) :-
    try { false } | note "unimplemented" @unannArrayType
  , true.


  unannClsTypeOk : UnannClassType
  
  unannClsTypeOk(ClassType(id, typeArgs')) :-
    try { false } | note "unimplemented" @id
  , try { false } | note "unimplemented" @typeArgs'
  , true.

  unannClsTypeOk(UnannClassOrInterfaceTypeMember(unannClsType, annos, id, typeArgs')) :-
    try { false } | note "unimplemented" @unannClsType
  , try { false } | note "unimplemented" @annos
  , try { false } | note "unimplemented" @id
  , try { false } | note "unimplemented" @typeArgs'
  , true.


  unannArrayTypeOk : UnannArrayType
  
  unannArrayTypeOk(UnannArrayTypePrimitive(unannPrimType, annDims)) :-
    try { false } | note "unimplemented" @unannPrimType
  , try { false } | note "unimplemented" @annDims
  , true.

  unannArrayTypeOk(UnannArrayTypeClassType(unannClsType, annDims)) :-
    try { false } | note "unimplemented" @unannClsType
  , try { false } | note "unimplemented" @annDims
  , true.


rules // 8.4. Method Declarations

  mthdDeclOk : MethodDeclaration
  
  mthdDeclOk(MethodDecl(mthdMods, mthdHeader, mthdBody)) :-
    try { false } | note "unimplemented" @mthdMods
  , try { false } | note "unimplemented" @mthdHeader
  , try { false } | note "unimplemented" @mthdBody
  , true.


  mthdHeaderOk : MethodHeader
  
  mthdHeaderOk(MethodHeader(annos, result, id, formalParams, throws')) :-
    try { false } | note "unimplemented" @annos
  , try { false } | note "unimplemented" @result
  , try { false } | note "unimplemented" @id
  , try { false } | note "unimplemented" @formalParams
  , try { false } | note "unimplemented" @throws'
  , true.

  mthdHeaderOk(MethodHeaderTypeParameters(typeParams, annos, result, id, formalParams, throws')) :-
    try { false } | note "unimplemented" @typeParams
  , try { false } | note "unimplemented" @annos
  , try { false } | note "unimplemented" @result
  , try { false } | note "unimplemented" @id
  , try { false } | note "unimplemented" @formalParams
  , try { false } | note "unimplemented" @throws'
  , true.


  resultOk : Result
  
  resultOk(UnannType2Result(unannType)) :-
    try { false } | note "unimplemented" @unannType
  , true.

  resultOk(Void()) :-
    false.


  throwsOk : Throws
  
  throwsOk(ThrowsDec(exceptTypes)) :-
    try { false } | note "unimplemented" @exceptTypes
  , true.


  exceptTypeOk : ExceptionType
  
  exceptTypeOk(ClassType2ExceptionType(clsType)) :-
    try { false } | note "unimplemented" @clsType
  , true.


  mthdMods : MethodModifier

  mthdMods(Annotation2MethodModifier(anno)) :-
    try { false } | note "unimplemented" @anno
  , true.
  mthdMods(Public2MethodModifier(_)) :- false.
  mthdMods(Protected2MethodModifier(_)) :- false.
  mthdMods(Private2MethodModifier(_)) :- false.
  mthdMods(Abstract2MethodModifier(_)) :- false.
  mthdMods(Static2MethodModifier(_)) :- false.
  mthdMods(Final2MethodModifier(_)) :- false.
  mthdMods(Synchronized2MethodModifier(_)) :- false.
  mthdMods(Native2MethodModifier(_)) :- false.
  mthdMods(Strictfp2MethodModifier(_)) :- false.


  mthdBodyOk : MethodBody
  
  mthdBodyOk(Block2MethodBody(blk)) :-
    try { false } | note "unimplemented" @blk
  , true.

  mthdBodyOk(NoMethodBody()) :-
    true.


  recvParamOk : ReceiverParam
  
  recvParamOk(ReceiverParamQual(annos, unannType, id)) :-
    try { false } | note "unimplemented" @annos
  , try { false } | note "unimplemented" @unannType
  , try { false } | note "unimplemented" @id
  , true.

  recvParamOk(ReceiverParam(annos, unannType)) :-
    try { false } | note "unimplemented" @annos
  , try { false } | note "unimplemented" @unannType
  , true.


  formalParamsOk : FormalParams
  
  formalParamsOk(NoParams()) :-
    true.

  formalParamsOk(ReceiverParam2FormalParams(recvParam)) :-
    try { false } | note "unimplemented" @recvParam
  , true.

  formalParamsOk(SingleParam(recvParam)) :-
    try { false } | note "unimplemented" @recvParam
  , true.

  formalParamsOk(ParamList(formalParams, lastFormalParam)) :-
    try { false } | note "unimplemented" @formalParams
  , try { false } | note "unimplemented" @lastFormalParam
  , true.

  formalParamsOk(ReceiverParamList(recvParam, formalParams, lastFormalParam)) :-
    try { false } | note "unimplemented" @recvParam
  , try { false } | note "unimplemented" @formalParams
  , try { false } | note "unimplemented" @lastFormalParam
  , true.


  lastFormalParamOk : LastFormalParam
  
  lastFormalParamOk(FormalParam2LastFormalParam(formalParam)) :-
    try { false } | note "unimplemented" @formalParam
  , true.
    
  lastFormalParamOk(VarArityParam(varMods, unannType, annos, varDeclId)) :-
    try { false } | note "unimplemented" @varMods
  , try { false } | note "unimplemented" @unannType
  , try { false } | note "unimplemented" @annos
  , try { false } | note "unimplemented" @varDeclId
  , true.


  formalParamOk : FormalParam
  
  formalParamOk(FormalParam(varMods, unannType, varDeclId)) :-
    try { false } | note "unimplemented" @varMods
  , try { false } | note "unimplemented" @unannType
  , try { false } | note "unimplemented" @varDeclId
  , true.


  varModOk : VariableModifier
  
  varModOk(Annotation2VariableModifier(anno)) :-
    try { false } | note "unimplemented" @anno
  , true.

  varModOk(Final2VariableModifier(_)) :-
    false.


rules // 8.6. Instance Initializers

  instInit : InstanceInitializer
  
  instInit(InstanceInit(blk)) :-
    try { false } | note "unimplemented" @blk
  , true.


rules // 8.7. Static Initializers

  staticInitOk : StaticInitializer

  staticInitOk(StaticInit(blk)) :-
    try { false } | note "unimplemented" @blk
  , true.


rules // 8.8. Constructor Declarations

  ctorDeclOk : ConstructorDeclaration
  
  ctorDeclOk(ConstrDecl(ctorMods, typeParams', id, formalParams, throws', ctorInvoke, blkStmts)) :-
    try { false } | note "unimplemented" @ctorMods
  , try { false } | note "unimplemented" @typeParams'
  , try { false } | note "unimplemented" @id
  , try { false } | note "unimplemented" @formalParams
  , try { false } | note "unimplemented" @throws'
  , try { false } | note "unimplemented" @ctorInvoke
  , try { false } | note "unimplemented" @blkStmts
  , true.


  ctorModOk : ConstructorModifier
  
  ctorModOk(Annotation2ConstructorModifier(annos)) :-
    try { false } | note "unimplemented" @annos
  , true.
  ctorModOk(Public2ConstructorModifier(_)) :- false.
  ctorModOk(Private2ConstructorModifier(_)) :- false.
  ctorModOk(Protected2ConstructorModifier(_)) :- false.


  ctorInvOk : ConstructorInvocation
  
  ctorInvOk(AltConstrInv(typeArgs', exprs)) :-
    try { false } | note "unimplemented" @typeArgs'
  , try { false } | note "unimplemented" @exprs
  , true.

  ctorInvOk(SuperConstrInv(typeArgs', exprs)) :-
    try { false } | note "unimplemented" @typeArgs'
  , try { false } | note "unimplemented" @exprs
  , true.

  ctorInvOk(ExprNameConstrInv(expr, typeArgs', exprs)) :-
    try { false } | note "unimplemented" @expr
  , try { false } | note "unimplemented" @typeArgs'
  , try { false } | note "unimplemented" @exprs
  , true.


rules // 8.9. Enum Types

  enumDeclOk : EnumDeclaration
  
  enumDeclOk(EnumDeclComma(clsMods, id, superIntfs', enumConsts, enumBodyDecls')) :-
    try { false } | note "unimplemented" @clsMods
  , try { false } | note "unimplemented" @id
  , try { false } | note "unimplemented" @superIntfs'
  , try { false } | note "unimplemented" @enumConsts
  , try { false } | note "unimplemented" @enumBodyDecls'
  , true.

  enumDeclOk(EnumDecl(clsMods, id, superIntfs', enumConsts, enumBodyDecls')) :-
    try { false } | note "unimplemented" @clsMods
  , try { false } | note "unimplemented" @id
  , try { false } | note "unimplemented" @superIntfs'
  , try { false } | note "unimplemented" @enumConsts
  , try { false } | note "unimplemented" @enumBodyDecls'
  , true.


  enumConstOk : EnumConstant
  
  enumConstOk(EnumConst(annos, id, enumConstArgs', clsBodyDecls)) :-
    try { false } | note "unimplemented" @annos
  , try { false } | note "unimplemented" @id
  , try { false } | note "unimplemented" @enumConstArgs'
  , try { false } | note "unimplemented" @clsBodyDecls
  , true.

  enumConstOk(EnumConstNoBody(annos, id, enumConstArgs')) :-
    try { false } | note "unimplemented" @annos
  , try { false } | note "unimplemented" @id
  , try { false } | note "unimplemented" @enumConstArgs'
  , true.


  enumConstArgsOk : EnumConstantArgs
  
  enumConstArgsOk(EnumConstArgs(exprs)) :-
    try { false } | note "unimplemented" @exprs
  , true.
    
    
  enumBodyDeclsOk : EnumBodyDeclarations
  
  enumBodyDeclsOk(EnumBodyDecs(clsBodyDecls)) :-
    try { false } | note "unimplemented" @clsBodyDecls
  , true.

