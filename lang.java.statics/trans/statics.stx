module statics

imports

  java/Main
  java/Object
  java/names/Main
  java/names/PackageNames
  java/names/TypeNames
  java/packages/CompilationUnits
  java/packages/PackageDeclarations

  signatures/java/Test-sig

rules

  projectOk : scope

  projectOk(s_proj) :-
    declareObject(s_proj),
    true.


  groupOk : scope * scope * string * scope

  groupOk(s_proj, s_parentPkg, id, s_thisPkg) :-
    s_thisPkg -PARENT-> s_parentPkg,
    declarePkg(s_parentPkg, Id(id), s_thisPkg),
    true.

  
  fileOk : scope * scope * CompilationUnit
  
  fileOk(s_proj, s_pkg, compilationUnit@CompilationUnit(_, _, _)) :-
    compilationUnitOk(s_proj, s_pkg, compilationUnit).

  fileOk(_, _, Test(expectationList, testUnitList)) :-
  {s_proj s_anonPkg}
    // isolate tests from the regular global scope
    new s_proj, projectOk(s_proj),

    new s_anonPkg, groupOk(s_proj, s_proj, "", s_anonPkg),

    testUnitListOk(s_proj, s_proj, s_anonPkg, testUnitList).


  testUnitOk : scope * scope * scope * TestUnit
  testUnitListOk maps testUnitOk(*, *, *, list(*))

  testUnitOk(s_proj, s_parentPkg, s_thisPkg, TestPkg(id, testUnitList)) :-
  {s_subPkg}
    new s_subPkg, groupOk(s_proj, s_parentPkg, id, s_subPkg),
    testUnitListOk(s_proj, s_subPkg, s_subPkg, testUnitList).

  testUnitOk(s_proj, s_parentPkg, s_thisPkg, TestFile(_, compilationUnit)) :-
    fileOk(s_proj, s_thisPkg, compilationUnit).
