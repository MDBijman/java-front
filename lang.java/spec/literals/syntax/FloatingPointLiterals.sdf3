%%%
 %% Section 3.10.2: Floating Point Literals
 %%%
module FloatingPointLiterals

sorts

  FloatLiteral DeciFloatLiteral HexaFloatLiteral

context-free syntax

  FloatLiteral.Float = DeciFloatLiteral
  FloatLiteral.Float = HexaFloatLiteral
  FloatLiteral.Double = DeciDoubleLiteral
  FloatLiteral.Double = HexaDoubleLiteral

lexical syntax

  DeciFloatLiteral = DeciFloatNumeral [fF]
  HexaFloatLiteral = HexaFloatNumeral [fF]
  DeciDoubleLiteral = DeciFloatNumeral [dD]?
  HexaDoubleLiteral = HexaFloatNumeral [dD]?
  DeciFloatLiteral = [0-9]+ {reject}

lexical restrictions

  DeciDoubleLiteral -/- [fFdD]
  HexaDoubleLiteral -/- [fFdD]

sorts

  DeciFloatNumeral DeciFloatDigits DeciFloatExponentPart

lexical syntax

  DeciFloatNumeral = DeciFloatDigits DeciFloatExponentPart?
  DeciFloatDigits = [0-9]* "." [0-9]*
  DeciFloatDigits = "." {reject}
  DeciFloatDigits = [0-9]+
  DeciFloatExponentPart = [eE] SignedInteger
  SignedInteger = [\+\-]? [0-9]+

lexical restrictions

  DeciFloatDigits -/- [0-9]
  DeciFloatExponentPart -/- [0-9]

sorts

  HexaFloatNumeral HexaSignificand BinaryExponent SignedInteger

lexical syntax

  HexaFloatNumeral = HexaSignificand BinaryExponent
  HexaSignificand = [0] [xX] [0-9a-fA-F]+
  HexaSignificand = [0] [xX] [0-9a-fA-F]* "." [0-9a-fA-F]*
  HexaSignificand = [0] [xX] "." {reject}
  BinaryExponent = [pP] SignedInteger

lexical restrictions

  HexaSignificand -/- [0-9a-fA-F]
  SignedInteger -/- [0-9]
