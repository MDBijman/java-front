module java/strip

imports

  signatures/-
  signatures/java/classes/-
  signatures/java/expressions/-
  signatures/java/interfaces/-
  signatures/java/lexical/-
  signatures/java/literals/-
  signatures/java/names/-
  signatures/java/packages/-
  signatures/java/statements/-
  signatures/java/types/-

  pp

rules

  null-statement-list = ![<null-statement>]
  null-statement =
    !Throw( NewInstance(
              None()
            , []
            , Id("java")
            , [QualifiedId([], Id("lang")), QualifiedId([], Id("RuntimeException"))]
            , None()
            , [StringLiteral("\"Implementation stripped\"")]
            )
          )


  null-expression-list = ![<null-expression>]
  null-expression = !Null()


  has-public-access    = where(getfirst(?Public()))
  has-private-access   = where(getfirst(?Private()))
  has-protected-access = where(getfirst(?Protected()))


rules

  strip-to-skeleton =
    strip-decls
  ; strip-non-publics
  ; strip-unused-imports

  strip-to-public-interface =
    strip-impls
  ; strip-non-publics
  ; strip-unused-imports

rules

  strip-non-publics = topdown(try(strip-non-public))

  // 7.3. Compilation Units
  strip-non-public = CompilationUnit(id, id, filter(where(is-public)))

  // 8.1. Class Declarations
  strip-non-public = ClassDeclaration(id, id, id, id, id, filter(where(is-public)))

  // 8.9. Enum Types
  strip-non-public = EnumDeclComma(id, id, id, id, filter(where(is-public)))
  strip-non-public = EnumDecl(id, id, id, id, filter(where(is-public)))

  // 9.6. Annotation Types
  strip-non-public = AnnoDec(id, id, filter(where(is-public)))

rules

  // 8.1. Class Declarations
  is-public = ?ClassDeclaration(<has-public-access>, _, _, _, _, _)

  // 8.3. Field Declarations
  is-public = ?FieldDecl(<has-public-access>, _, _)

  // 8.4. Method Declarations
  is-public = ?MethodDecl(<has-public-access>, _, _)

  // 8.7. Static Initializers
  is-public = ?StaticInit(_)

  // 8.8. Constructor Declarations
//is-public = ?ConstrDecl(<has-mod>, _, _, _, _, _, _)

  // 8.9. Enum Types
  is-public = ?EnumDeclComma(<has-public-access>, _, _, _, _)
  is-public = ?EnumDecl(<has-public-access>, _, _, _, _)

  // 9.1. Interface Declarations
  is-public = ?NormalInterface(<has-public-access>, _, _, _, _)

  // 9.6. Annotation Types
  is-public = ?AnnoDec(<has-public-access>, _, _)

rules

  strip-decls = topdown(try(strip-decl))

  // 8.1. Class Declarations
  strip-decl = ClassDeclaration(strip-anns, id, id, id, id, ![])

  // 8.9. Enum Types
  strip-decl = EnumDeclComma(strip-anns, id, id, id, !None())
  strip-decl = EnumDecl(strip-anns, id, id, id, !None())

  // 9.1. Interface Declarations
  strip-decl = NormalInterface(strip-anns, id, id, id, ![])

  // 9.6. Annotation Types
  strip-decl = AnnoDec(strip-anns, id, ![])

rules

  strip-impls = topdown(try(strip-impl))

  // 8.1. Class Declarations
  strip-impl = ClassDeclaration(strip-anns, id, id, id, id, id)

  // 8.3. Field Declarations
  strip-impl = FieldDecl(strip-anns, id, id)
  strip-impl = ?VariableDeclInit(<id>, _)

  // 8.4. Method Declarations
  strip-impl = MethodDecl(strip-anns, id, id)

  // 8.8. Constructor Declarations
  strip-impl = ConstrDecl(id, id, id, id, id, id, ![])

  // 8.9. Enum Types
  strip-impl = EnumDeclComma(strip-anns, id, id, id, id)
  strip-impl = EnumDecl(strip-anns, id, id, id, id)
  strip-impl = EnumConstArgs(null-expression-list)

  // 9.1. Interface Declarations
  strip-impl = NormalInterface(strip-anns, id, id, id, id)

  // 9.6. Annotation Types
  strip-impl = AnnoDec(strip-anns, id, id)

  // 9.7. Annotations
  strip-anns = filter(not(?Anno(_, _) + ?MarkerAnno(_) + ?SingleElemAnno(_, _)))

  // 14.2. Blocks
  strip-impl = Block(null-statement-list)


rules

  strip-unused-imports =
    with(used := <collect-all(?ClassType(_, <id>, _) + ?ClassType(<id>, _))>)
  ; CompilationUnit(id, filter(not(is-unused(\ x -> <getfirst(?x)> used \))), id)

  // 6.5. Determining the Meaning of a Name
  is-unused(used) = ?TypeName(<not(used)>)
  is-unused(used) = ?TypeName(_, <not(used)>)

  // 7.5. Import Declarations
  is-unused(used) = ?SingleTypeImport(<is-unused(used)>)
  is-unused(used) = ?SingleStaticImport(_,_)
  is-unused(used) = ?StaticImportOnDemand(_)
