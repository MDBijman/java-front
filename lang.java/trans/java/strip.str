module java/strip

imports

  signatures/-
  signatures/java/classes/-
  signatures/java/expressions/-
  signatures/java/interfaces/-
  signatures/java/lexical/-
  signatures/java/literals/-
  signatures/java/names/-
  signatures/java/packages/-
  signatures/java/statements/-
  signatures/java/types/-

  pp

rules

  null-statement-list = ![<null-statement>]
  null-statement =
    !Throw( NewInstance(
              None()
            , []
            , Id("java")
            , [QualifiedId([], Id("lang")), QualifiedId([], Id("RuntimeException"))]
            , None()
            , [StringLiteral("\"Implementation stripped\"")]
            )
          )

  null-expression-list = ![<null-expression>]
  null-expression = !Null()

rules

  strip-all =
    strip-accesses
  ; strip-bodies
  ; strip-unused-imports

  is-nonpublic = not(getfirst(?Public()))
  is-private   = getfirst(?Private())
  is-protected = getfirst(?Protected())

rules

  strip-accesses = topdown(try(strip-access))

  // 7.3. Compilation Units
  strip-access = CompilationUnit(id, id, filter(not(is-access)))

  // 8.1. Class Declarations
  strip-access = ClassDeclaration(id, id, id, id, id, filter(not(is-access)))

  // 8.9. Enum Types
  strip-access = EnumDeclComma(id, id, id, id, filter(not(is-access)))
  strip-access = EnumDecl(id, id, id, id, filter(not(is-access)))

  // 9.6. Annotation Types
  strip-access = AnnoDec(id, id, filter(not(is-access)))

rules

  // 8.1. Class Declarations
  is-access = ?ClassDeclaration(<is-nonpublic>, _, _, _, _, _)

  // 8.3. Field Declarations
  is-access = ?FieldDecl(<is-nonpublic>, _, _)

  // 8.4. Method Declarations
  is-access = ?MethodDecl(<is-nonpublic>, _, _)

  // 8.7. Static Initializers
  is-access = ?StaticInit(_)

  // 8.8. Constructor Declarations
//is-access = ?ConstrDecl(<has-mod>, _, _, _, _, _, _)

  // 8.9. Enum Types
  is-access = ?EnumDeclComma(<is-nonpublic>, _, _, _, _)
  is-access = ?EnumDecl(<is-nonpublic>, _, _, _, _)

  // 9.1. Interface Declarations
  is-access = ?NormalInterface(<is-nonpublic>, _, _, _, _)

  // 9.6. Annotation Types
  is-access = ?AnnoDec(<is-nonpublic>, _, _)

rules

  strip-bodies = topdown(try(strip-body))

  // 8.1. Class Declarations
  strip-body = ClassDeclaration(strip-anns, id, id, id, id, id)

  // 8.3. Field Declarations
  strip-body = FieldDecl(strip-anns, id, id)
  strip-body = ?VariableDeclInit(<id>, _)

  // 8.4. Method Declarations
  strip-body = MethodDecl(strip-anns, id, id)

  // 8.8. Constructor Declarations
  strip-body = ConstrDecl(id, id, id, id, id, id, ![])

  // 8.9. Enum Types
  strip-body = EnumDeclComma(strip-anns, id, id, id, id)
  strip-body = EnumDecl(strip-anns, id, id, id, id)
  strip-body = EnumConstArgs(null-expression-list)

  // 9.1. Interface Declarations
  strip-body = NormalInterface(strip-anns, id, id, id, id)

  // 9.6. Annotation Types
  strip-body = AnnoDec(strip-anns, id, id)

  // 9.7. Annotations
  strip-anns = filter(not(?Anno(_, _) + ?MarkerAnno(_) + ?SingleElemAnno(_, _)))

  // 14.2. Blocks
  strip-body = Block(null-statement-list)


rules

  strip-unused-imports =
    with(used := <collect-all(?ClassType(_, <id>, _) + ?ClassType(<id>, _))>)
  ; CompilationUnit(id, filter(not(is-unused(\ x -> <getfirst(?x)> used \))), id)

  // 6.5. Determining the Meaning of a Name
  is-unused(used) = ?TypeName(<not(used)>)
  is-unused(used) = ?TypeName(_, <not(used)>)

  // 7.5. Import Declarations
  is-unused(used) = ?SingleTypeImport(<is-unused(used)>)
  is-unused(used) = ?SingleStaticImport(_,_)
  is-unused(used) = ?StaticImportOnDemand(_)
